{"ast":null,"code":"var _jsxFileName = \"/home/shreshth/QF/src/pages/ProjectDescription/ProjectDescription.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Footer from \"../../Components/Footer/Footer\";\nimport Navbar from \"../../Components/Navbar/Navbar\";\nimport Description from \"../../Components/Description/Description\";\nimport { getProjectData } from \"../../data/ProjectData\";\nimport \"./ProjectDescription.css\";\nimport { address, abi } from \"../../config\";\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProjectDescription = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [projectAccount, setProjectAccount] = useState(\"\");\n  const [contract, setContract] = useState();\n  const [web3Provider, setWeb3Provider] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [selectedCategories, setSelectedCategories] = useState();\n\n  const transact = async () => {\n    try {\n      let {\n        web3\n      } = window;\n\n      if (typeof web3 !== 'undefined') {\n        web3 = new Web3(web3.currentProvider);\n      } else {\n        window.alert('Please connect to Metamask.');\n      }\n\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        window.web3 = new Web3(ethereum);\n\n        try {\n          // Request account access if needed\n          await ethereum.enable();\n        } catch (error) {// User denied account access...\n        }\n      } // Legacy dapp browsers...\n      else if (window.web3) {\n        setWeb3Provider(web3.currentProvider);\n        window.web3 = new Web3(web3.currentProvider);\n      } // Non-dapp browsers...\n      else {\n        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      }\n\n      projects.map(project => {\n        if (project[0] === parseInt(id)) {\n          web3.eth.sendTransaction({\n            from: currentAccount,\n            to: project[1].projectOwner\n          }).then(async function (receipt) {\n            console.log(receipt);\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Install Metamask please!\");\n      return;\n    } else {\n      console.log(\"All set!\");\n    }\n\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Account address : \", account);\n        setCurrentAccount(account);\n        await loadContract();\n      } else {\n        console.log(\"No account found\");\n      }\n    } catch (error) {\n      console.log(\"Error : \", error);\n    }\n  };\n\n  const selectedCat = () => {\n    for (const key in selectedCategories) {\n      if (selectedCategories[key]) return true;\n    }\n\n    return false;\n  };\n\n  const loadContract = async () => {\n    try {\n      let {\n        web3\n      } = window;\n\n      if (typeof web3 !== 'undefined') {\n        setWeb3Provider(web3.currentProvider);\n        web3 = new Web3(web3.currentProvider);\n      } else {\n        window.alert('Please connect to Metamask.');\n      }\n\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        window.web3 = new Web3(ethereum);\n\n        try {\n          // Request account access if needed\n          await ethereum.enable();\n        } catch (error) {// User denied account access...\n        }\n      } // Legacy dapp browsers...\n      else if (window.web3) {\n        setWeb3Provider(web3.currentProvider);\n        window.web3 = new Web3(web3.currentProvider);\n      } // Non-dapp browsers...\n      else {\n        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      }\n\n      if (!contract) setContract(new web3.eth.Contract(abi, address));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkWalletIsConnected().then(getProjects);\n    if (fund === \"fund\") transact();\n    const categories = [\"DeFi\", \"NFT\", \"Gaming\", \"Wallet\", \"Education\", \"Media\"];\n    const isSelected = {};\n    categories.forEach(category => isSelected[category] = false);\n    setSelectedCategories(isSelected);\n  }, [contract]);\n\n  const getProjects = async () => {\n    if (contract) contract.methods.getAllProjects().call().then(i => Object.entries(i)).then(i => setProjects(i));\n  };\n\n  const {\n    id,\n    fund\n  } = useParams();\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   <h1>hello - {id}</h1>\n    //   <div>\n    //     {projects.map((project) => {\n    //       if (project.id === parseInt(id)) {\n    //         console.log(project.name);\n    //         return <h1 key={project.id}>{project.name}</h1>;\n    //       }\n    //     })}\n    //   </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-nav1\",\n        children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }, this), projects.map(project => {\n        if (project[0] == parseInt(id)) {\n          return /*#__PURE__*/_jsxDEV(Description, {\n            project: project[1],\n            className: \"description1\",\n            contract: contract,\n            currentAccount: currentAccount,\n            web3Provider: web3Provider\n          }, project[0], false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this);\n        }\n      }), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(ProjectDescription, \"B35quTGpaAiUJlbkSGZpOrgoGUw=\", false, function () {\n  return [useParams];\n});\n\n_c = ProjectDescription;\nexport default ProjectDescription;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectDescription\");","map":{"version":3,"sources":["/home/shreshth/QF/src/pages/ProjectDescription/ProjectDescription.js"],"names":["useState","useEffect","useParams","Footer","Navbar","Description","getProjectData","address","abi","Web3","ProjectDescription","currentAccount","setCurrentAccount","projectAccount","setProjectAccount","contract","setContract","web3Provider","setWeb3Provider","projects","setProjects","selectedCategories","setSelectedCategories","transact","web3","window","currentProvider","alert","ethereum","enable","error","console","log","map","project","parseInt","id","eth","sendTransaction","from","to","projectOwner","then","receipt","checkWalletIsConnected","accounts","request","method","length","account","loadContract","selectedCat","key","Contract","getProjects","fund","categories","isSelected","forEach","category","methods","getAllProjects","call","i","Object","entries"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport Footer from \"../../Components/Footer/Footer\";\nimport Navbar from \"../../Components/Navbar/Navbar\";\nimport Description from \"../../Components/Description/Description\";\nimport { getProjectData } from \"../../data/ProjectData\";\nimport \"./ProjectDescription.css\";\n\n\nimport {address, abi} from \"../../config\";\nimport Web3 from 'web3';\n\n\nconst ProjectDescription = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [projectAccount, setProjectAccount] = useState(\"\");\n  const [contract, setContract] = useState();\n  const [web3Provider, setWeb3Provider] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [selectedCategories, setSelectedCategories] = useState();\n\n  const transact = async () => {\n    try{\n      let {web3} = window;\n      if (typeof web3 !== 'undefined') {\n          web3 = new Web3(web3.currentProvider)\n      } else {\n        window.alert('Please connect to Metamask.')\n      }\n      const {ethereum} = window;\n\n      if (ethereum) {\n          window.web3 = new Web3(ethereum)\n          try {\n            // Request account access if needed\n            await ethereum.enable()\n          } catch (error) {\n            // User denied account access...\n          }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        setWeb3Provider(web3.currentProvider);\n        window.web3 = new Web3(web3.currentProvider)\n      }\n      // Non-dapp browsers...\n      else {\n        console.log(\n          'Non-Ethereum browser detected. You should consider trying MetaMask!',\n        )\n      }\n      projects.map((project) => {\n        if (project[0] === parseInt(id)) {\n          web3.eth.sendTransaction({from:currentAccount, to: project[1].projectOwner})\n          .then(async function(receipt){\n            console.log(receipt);\n          })\n        }\n      })\n   \n\n    }catch(error){\n       console.log(error);\n    }\n      \n  }\n\n  const checkWalletIsConnected = async () => {\n    const {ethereum} = window;\n    if(!ethereum){\n      console.log(\"Install Metamask please!\");\n      return;\n    }else{\n      console.log(\"All set!\");\n    }\n    try{\n      const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n\n      if(accounts.length !== 0){\n        const account = accounts[0];\n        console.log(\"Account address : \", account);\n        setCurrentAccount(account)\n        await loadContract();\n        \n      }else{\n        console.log(\"No account found\");\n      }\n      \n    } catch(error){\n      console.log(\"Error : \", error);\n    }\n  }\n\n  const selectedCat = () => {\n      for(const key in selectedCategories){\n          if(selectedCategories[key]) return true;\n      }\n      return false;\n  }\n\n  const loadContract = async () => {\n    try{\n      let {web3} = window;\n      if (typeof web3 !== 'undefined') {\n         setWeb3Provider(web3.currentProvider);\n          web3 = new Web3(web3.currentProvider)\n      } else {\n        window.alert('Please connect to Metamask.')\n      }\n      const {ethereum} = window;\n\n      if (ethereum) {\n          window.web3 = new Web3(ethereum)\n          try {\n            // Request account access if needed\n            await ethereum.enable()\n          } catch (error) {\n            // User denied account access...\n          }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        setWeb3Provider(web3.currentProvider);\n        window.web3 = new Web3(web3.currentProvider)\n      }\n      // Non-dapp browsers...\n      else {\n        console.log(\n          'Non-Ethereum browser detected. You should consider trying MetaMask!',\n        )\n      }\n      if(!contract)\n      setContract(new web3.eth.Contract(abi, address))\n    }catch(error){\n       console.log(error);\n    }\n  }\n\n\n    useEffect(() => {\n    checkWalletIsConnected()\n    .then(\n        getProjects\n    )\n        if(fund===\"fund\") transact();\n        const categories=[\"DeFi\", \"NFT\", \"Gaming\", \"Wallet\", \"Education\", \"Media\"];\n        const isSelected = {};\n        categories.forEach(category => isSelected[category] = false  )\n        setSelectedCategories(isSelected);\n      }, [contract]);\n\n      \n    const getProjects = async () => {\n       if(contract)\n        contract.methods.getAllProjects().call().then(i =>Object.entries(i)).then(i => setProjects(i));\n    }\n  const { id, fund } = useParams();\n\n\n  return (\n    // <div>\n    //   <h1>hello - {id}</h1>\n    //   <div>\n    //     {projects.map((project) => {\n    //       if (project.id === parseInt(id)) {\n    //         console.log(project.name);\n    //         return <h1 key={project.id}>{project.name}</h1>;\n    //       }\n    //     })}\n    //   </div>\n    // </div>\n    <div>\n      <div className=\"project-nav1\">\n        <Navbar />\n      </div>\n      {projects.map((project) => {\n        if (project[0] == parseInt(id)) {\n          return (\n            <Description\n              project={project[1]}\n              key={project[0]}\n              className=\"description1\"\n              contract={contract}\n              currentAccount={currentAccount}\n              web3Provider={web3Provider}\n            />\n          );\n        }\n      })}\n      <Footer />\n    </div>\n  );\n};\n\nexport default ProjectDescription;\n"]},"metadata":{},"sourceType":"module"}