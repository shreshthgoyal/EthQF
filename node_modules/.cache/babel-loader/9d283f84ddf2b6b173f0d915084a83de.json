{"ast":null,"code":"var _jsxFileName = \"/home/shreshth/QF/src/pages/ProjectListing/ProjectListing.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport ProjectCard from \"../../Components/ProjectCard/ProjectCard\";\nimport SearchBar from \"../../Components/SearchBar/SearchBar\";\nimport Filter from \"../../Components/Filter/Filter\";\nimport Footer from \"../../Components/Footer/Footer\";\nimport Navbar from \"../../Components/Navbar/Navbar\";\nimport { address, abi } from \"../../config\";\nimport Web3 from 'web3';\nimport { useNavigate } from \"react-router-dom\";\nimport LoginGithub from 'react-login-github';\nimport axios from 'axios';\nimport './ProjectListing.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProjectListing = () => {\n  _s();\n\n  let token = null;\n  const navigate = useNavigate();\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [contract, setContract] = useState();\n  const [web3Provider, setWeb3Provider] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategories, setSelectedCategories] = useState();\n  const [select, setSelect] = useState(false);\n\n  const checkWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Install Metamask please!\");\n      return;\n    } else {\n      console.log(\"All set!\");\n    }\n\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Account address : \", account);\n        setCurrentAccount(account);\n        await loadContract();\n      } else {\n        console.log(\"No account found\");\n      }\n    } catch (error) {\n      console.log(\"Error : \", error);\n    }\n  };\n\n  const selectedCat = () => {\n    for (const key in selectedCategories) {\n      if (selectedCategories[key]) return true;\n    }\n\n    return false;\n  };\n\n  const loadContract = async () => {\n    try {\n      let {\n        web3\n      } = window;\n\n      if (typeof web3 !== 'undefined') {\n        setWeb3Provider(web3.currentProvider);\n        web3 = new Web3(web3.currentProvider);\n      } else {\n        window.alert('Please connect to Metamask.');\n      }\n\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        window.web3 = new Web3(ethereum);\n\n        try {\n          // Request account access if needed\n          await ethereum.enable();\n        } catch (error) {// User denied account access...\n        }\n      } // Legacy dapp browsers...\n      else if (window.web3) {\n        setWeb3Provider(web3.currentProvider);\n        window.web3 = new Web3(web3.currentProvider);\n      } // Non-dapp browsers...\n      else {\n        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      }\n\n      if (!contract) setContract(new web3.eth.Contract(abi, address));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkWalletIsConnected().then(getProjects);\n    const categories = [\"DeFi\", \"NFT\", \"Gaming\", \"Wallet\", \"Education\", \"Media\"];\n    const isSelected = {};\n    categories.forEach(category => isSelected[category] = false);\n    setSelectedCategories(isSelected);\n  }, [contract, currentAccount]);\n\n  const getProjects = async () => {\n    if (contract) contract.methods.getAllProjects().call().then(i => Object.entries(i)).then(i => setProjects(i));\n  };\n\n  const handleSearch = query => {\n    setSearchQuery(query);\n  };\n\n  const onSuccess = response => {\n    axios.get(`https://qfdone.herokuapp.com/authenticate/${response.code}`).then(res => res.data.token).then(_token => {\n      token = _token;\n      navigate('/form', {\n        state: token\n      });\n    }).catch(err => console.log(err));\n  };\n\n  const onFailure = res => console.error(res);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-nav\",\n      children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-header-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-header-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"block\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: [\"Projects\", /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-bar\",\n        children: /*#__PURE__*/_jsxDEV(SearchBar, {\n          handleSearch: handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"projects-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter\",\n        children: /*#__PURE__*/_jsxDEV(Filter, {\n          selectedCategories: selectedCategories,\n          setSelectedCategories: setSelectedCategories,\n          setSelect: setSelect,\n          select: select\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-grid-wrapper\",\n        children: projects.length != 0 ? projects.filter(project => {\n          if (searchQuery === \"\") return project[1];else if (project[1].title.toLowerCase().includes(searchQuery.toLowerCase())) return project[1];\n        }).map(project => {\n          if (selectedCat()) return selectedCategories[project[1].category] ? /*#__PURE__*/_jsxDEV(ProjectCard, {\n            project: project[1]\n          }, project[0], false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 77\n          }, this) : null;\n          return /*#__PURE__*/_jsxDEV(ProjectCard, {\n            project: project[1],\n            contract: contract,\n            currentAccount: currentAccount\n          }, project[0], false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 35\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-project-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-projects\",\n            children: \"No project has been listed yet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 71\n          }, this), /*#__PURE__*/_jsxDEV(LoginGithub, {\n            clientId: \"0661798dd8b17b1f2412\",\n            onSuccess: onSuccess,\n            onFailure: onFailure,\n            scope: \"repo%20read:user\",\n            buttonText: \"List a Project\",\n            className: \"hero__cta cta cta--primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProjectListing, \"PC5OMW+qkmpUtXXNXXHLvlEAQ/0=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ProjectListing;\nexport default ProjectListing;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectListing\");","map":{"version":3,"sources":["/home/shreshth/QF/src/pages/ProjectListing/ProjectListing.js"],"names":["useState","useEffect","ProjectCard","SearchBar","Filter","Footer","Navbar","address","abi","Web3","useNavigate","LoginGithub","axios","ProjectListing","token","navigate","currentAccount","setCurrentAccount","contract","setContract","web3Provider","setWeb3Provider","projects","setProjects","searchQuery","setSearchQuery","selectedCategories","setSelectedCategories","select","setSelect","checkWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","loadContract","error","selectedCat","key","web3","currentProvider","alert","enable","eth","Contract","then","getProjects","categories","isSelected","forEach","category","methods","getAllProjects","call","i","Object","entries","handleSearch","query","onSuccess","response","get","code","res","data","_token","state","catch","err","onFailure","filter","project","title","toLowerCase","includes","map"],"mappings":"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","sourcesContent":["import { useState, useEffect} from \"react\";\n\nimport ProjectCard from \"../../Components/ProjectCard/ProjectCard\";\nimport SearchBar from \"../../Components/SearchBar/SearchBar\";\nimport Filter from \"../../Components/Filter/Filter\";\nimport Footer from \"../../Components/Footer/Footer\";\nimport Navbar from \"../../Components/Navbar/Navbar\";\nimport {address, abi} from \"../../config\";\nimport Web3 from 'web3';\nimport { useNavigate } from \"react-router-dom\";\nimport LoginGithub from 'react-login-github';\nimport axios from 'axios';\n\nimport './ProjectListing.css';\n\nconst ProjectListing =  () => {\n\n  let token = null;\n  const navigate = useNavigate();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [contract, setContract] = useState();\n  const [web3Provider, setWeb3Provider] = useState(null);\n  const [projects, setProjects] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategories, setSelectedCategories] = useState();\n  const [select, setSelect] = useState(false);\n\n  const checkWalletIsConnected = async () => {\n    const {ethereum} = window;\n    if(!ethereum){\n      console.log(\"Install Metamask please!\");\n      return;\n    }else{\n      console.log(\"All set!\");\n    }\n    try{\n      const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n\n      if(accounts.length !== 0){\n        const account = accounts[0];\n        console.log(\"Account address : \", account);\n        setCurrentAccount(account)\n        await loadContract();\n        \n      }else{\n        console.log(\"No account found\");\n      }\n      \n    } catch(error){\n      console.log(\"Error : \", error);\n    }\n  }\n\n  const selectedCat = () => {\n      for(const key in selectedCategories){\n          if(selectedCategories[key]) return true;\n      }\n      return false;\n  }\n\n  const loadContract = async () => {\n    try{\n      let {web3} = window;\n      if (typeof web3 !== 'undefined') {\n         setWeb3Provider(web3.currentProvider);\n          web3 = new Web3(web3.currentProvider)\n      } else {\n        window.alert('Please connect to Metamask.')\n      }\n      const {ethereum} = window;\n\n      if (ethereum) {\n          window.web3 = new Web3(ethereum)\n          try {\n            // Request account access if needed\n            await ethereum.enable()\n          } catch (error) {\n            // User denied account access...\n          }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        setWeb3Provider(web3.currentProvider);\n        window.web3 = new Web3(web3.currentProvider)\n      }\n      // Non-dapp browsers...\n      else {\n        console.log(\n          'Non-Ethereum browser detected. You should consider trying MetaMask!',\n        )\n      }\n      if(!contract)\n      setContract(new web3.eth.Contract(abi, address))\n    }catch(error){\n       console.log(error);\n    }\n  }\n\n\n    useEffect(() => {\n    checkWalletIsConnected()\n    .then(\n        getProjects\n    )\n        const categories=[\"DeFi\", \"NFT\", \"Gaming\", \"Wallet\", \"Education\", \"Media\"];\n        const isSelected = {};\n        categories.forEach(category => isSelected[category] = false  )\n        setSelectedCategories(isSelected);\n      }, [contract, currentAccount]);\n\n      \n    const getProjects = async () => {\n       if(contract)\n        contract.methods.getAllProjects().call().then(i =>Object.entries(i)).then(i => setProjects(i));\n    }\n\n    const handleSearch = (query) =>{\n        setSearchQuery(query);\n    }\n\n    const onSuccess = response => {\n      axios.get(`https://qfdone.herokuapp.com/authenticate/${response.code}`)\n        .then(res => res.data.token)\n        .then(_token => {\n          token = _token;\n          navigate('/form', {state : token})\n        })\n        .catch(err => console.log(err));};\n  \n      const onFailure = res => console.error(res);\n\n    return(\n        <div className=\"wrapper\">\n        <div className=\"project-nav\"><Navbar /></div>\n            <div className=\"project-header\">\n                <div className=\"project-header-container\"></div>\n                <div className=\"project-header-section\">\n                    <div className=\"box\">\n\n                        <div className=\"title\">\n                            <span className=\"block\"></span>\n                            <h1>Projects<span></span></h1>\n                        </div>\n\n                    </div>\n                   \n                </div>\n            </div>\n                <div className=\"project-section\">\n                     <div className=\"search-bar\">\n                        <SearchBar handleSearch={handleSearch} />\n                    </div>\n                </div>\n                <div className=\"projects-wrapper\">\n                        <div className=\"filter\">\n                            <Filter selectedCategories={selectedCategories} setSelectedCategories={setSelectedCategories} setSelect= {setSelect} select={select}/>\n                        </div>\n                        <div className=\"project-grid-wrapper\">\n                        {projects.length != 0 ?\n                         (projects.filter((project) => {\n                                if (searchQuery === \"\" )                               \n                                    return project[1];\n                                else if (project[1].title.toLowerCase().includes(searchQuery.toLowerCase()))\n                                    return project[1];\n                                                           \n                             })\n                            .map((project) => {\n                            if(selectedCat())\n                           return selectedCategories[project[1].category] ? <ProjectCard project={project[1]} key={project[0]}/> : null \n\n                           return <ProjectCard project={project[1]} key={project[0]} contract={contract} currentAccount={currentAccount} />;\n                            })) : <div className=\"empty-project-list\"><div className=\"no-projects\">No project has been listed yet</div>\n                              <LoginGithub clientId=\"0661798dd8b17b1f2412\"\n                            onSuccess={onSuccess}\n                            onFailure={onFailure}\n                            scope= \"repo%20read:user\"\n                            buttonText= \"List a Project\"\n                            className=\"hero__cta cta cta--primary\" />\n                            </div>\n                        }\n                        </div>\n                </div>\n               \n            <Footer />\n            \n        </div>\n    )\n}\n\nexport default ProjectListing;"]},"metadata":{},"sourceType":"module"}